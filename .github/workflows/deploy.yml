name: Deploy Wedding Website

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'yarn'

    - name: Load environment variables
      run: |
        echo "DOCKER_IMAGE=${{ secrets.DOCKER_IMAGE }}" >> $GITHUB_ENV
        echo "DOCKER_TAG=${{ secrets.DOCKER_TAG }}" >> $GITHUB_ENV
        echo "SERVER_HOST=${{ secrets.SERVER_HOST }}" >> $GITHUB_ENV
        echo "SERVER_PORT=${{ secrets.SERVER_PORT }}" >> $GITHUB_ENV
        echo "SERVER_USER=${{ secrets.SERVER_USER }}" >> $GITHUB_ENV
        echo "CONTAINER_NAME=wedding-website" >> $GITHUB_ENV
        echo "PORT=1108" >> $GITHUB_ENV
        echo "HOST=0.0.0.0" >> $GITHUB_ENV
        echo "NODE_ENV=production" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_NAVER_MAP_CLIENT_ID=${{ secrets.NEXT_PUBLIC_NAVER_MAP_CLIENT_ID }}" >> $GITHUB_ENV
        echo "NAVER_MAP_CLIENT_SECRET=${{ secrets.NAVER_MAP_CLIENT_SECRET }}" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_KAKAO_JS_KEY=${{ secrets.NEXT_PUBLIC_KAKAO_JS_KEY }}" >> $GITHUB_ENV

    - name: Clean and Install dependencies
      run: |
        rm -rf node_modules
        yarn cache clean
        yarn install --frozen-lockfile

    - name: Check TypeScript is installed
      run: yarn list typescript

    - name: Run linting
      run: yarn lint

    - name: Run type checking
      run: yarn type-check

    - name: Build
      run: yarn build
      env:
        NEXT_PUBLIC_NAVER_MAP_CLIENT_ID: ${{ secrets.NEXT_PUBLIC_NAVER_MAP_CLIENT_ID }}
        NAVER_MAP_CLIENT_SECRET: ${{ secrets.NAVER_MAP_CLIENT_SECRET }}
        NEXT_PUBLIC_KAKAO_JS_KEY: ${{ secrets.NEXT_PUBLIC_KAKAO_JS_KEY }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        driver-opts: |
          image=moby/buildkit:latest
          network=host

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
          ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
        cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache
        cache-to: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache,mode=max
        platforms: linux/amd64
        build-args: |
          HOST=${{ env.HOST }}
          NODE_ENV=${{ env.NODE_ENV }}
          NEXT_PUBLIC_NAVER_MAP_CLIENT_ID=${{ secrets.NEXT_PUBLIC_NAVER_MAP_CLIENT_ID }}
          NAVER_MAP_CLIENT_SECRET=${{ secrets.NAVER_MAP_CLIENT_SECRET }}
          NEXT_PUBLIC_KAKAO_JS_KEY=${{ secrets.NEXT_PUBLIC_KAKAO_JS_KEY }}

    - name: Deploy to Personal Server via SSH
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ env.SERVER_HOST }}
        port: ${{ env.SERVER_PORT }}
        username: ${{ env.SERVER_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        timeout: 30s
        command_timeout: 10m
        script: |
          echo "üìÅ Preparing host directories..."
          HOST_PUBLIC_DIR="/home/ubuntu/wedding-website/public"
          mkdir -p $HOST_PUBLIC_DIR/uploads
          mkdir -p $HOST_PUBLIC_DIR/uploads/images

          sudo chown -R 1001:1001 $HOST_PUBLIC_DIR
          sudo chmod -R 775 $HOST_PUBLIC_DIR

          if docker ps -a | grep -q ${{ env.CONTAINER_NAME }}; then
            echo "Stopping and removing previous container..."
            docker stop ${{ env.CONTAINER_NAME }} || true
            docker rm ${{ env.CONTAINER_NAME }} || true
          fi

          echo "Pulling new image..."
          docker pull ${{ env.DOCKER_IMAGE }}:${{ github.sha }}

          echo "Starting new container..."
          docker run -d \
            --name ${{ env.CONTAINER_NAME }} \
            --restart unless-stopped \
            --health-cmd "curl -f http://localhost:${{ env.PORT }} || exit 1" \
            --health-interval 30s \
            --health-timeout 3s \
            --health-retries 3 \
            -p ${{ env.PORT }}:${{ env.PORT }} \
            -e HOST=${{ env.HOST }} \
            -e NODE_ENV=${{ env.NODE_ENV }} \
            -e NEXT_PUBLIC_NAVER_MAP_CLIENT_ID="${{ secrets.NEXT_PUBLIC_NAVER_MAP_CLIENT_ID }}" \
            -e NAVER_MAP_CLIENT_SECRET="${{ secrets.NAVER_MAP_CLIENT_SECRET }}" \
            -e NEXT_PUBLIC_KAKAO_JS_KEY="${{ secrets.NEXT_PUBLIC_KAKAO_JS_KEY }}" \
            --user 1001:1001 \
            -v $HOST_PUBLIC_DIR:/app/public \
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}

          echo "Checking deployment status..."
          sleep 10
          if docker ps | grep -q ${{ env.CONTAINER_NAME }}; then
            echo "‚úÖ Deployment successful!"
            docker logs ${{ env.CONTAINER_NAME }}
          else
            echo "‚ùå Deployment failed!"
            docker logs ${{ env.CONTAINER_NAME }}
            exit 1
          fi
